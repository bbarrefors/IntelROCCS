#!/bin/bash
# --------------------------------------------------------------------------------------------------
# Process to keep the monitor alive and well.
#
# v1.0                                                                         C.Paus (Mar 09, 2014)
# --------------------------------------------------------------------------------------------------
# initialize environment variables
source /usr/local/IntelROCCS/Monitor/setupMonitor.sh

while [ 1 ]
do

  # make sure the log directory exists
  mkdir -p $MONITOR_DB
  if [ -e "$MONITOR_DB" ]
  then
    #echo " Monitor log area exists. Let's start!"
    sleep 1
  else
    echo ""
    echo " Monitor database area could not be found ($MONITOR_DB). EXIT!"
    echo ""
    exit 1
  fi

  # generate specific log file
  tag=`date "+%s"`
  logFile=$MONITOR_DB/monitor-$tag.log
  touch $logFile
  echo ""                                                                       >> $logFile 
  echo " = = = =  I N I T I A L  S H E L L  E N V I R O N M E N T  = = = ="     >> $logFile 
  echo ""                                                                       >> $logFile 
  env  | grep -v ^MONITOR                                                       >> $logFile 
  echo ""                                                                       >> $logFile 
  echo " = = = =  I N I T I A L  M O N I T O R  E N V I R O N M E N T  = = = =" >> $logFile 
  echo ""                                                                       >> $logFile 
  env  | grep ^MONITOR                                                          >> $logFile 
  echo ""                                                                       >> $logFile 
  echo "[ PYTHON PATH: $PYTHONPATH ]"                                           >> $logFile
  echo ""                                                                       >> $logFile 

  # ten loops over the process with one logfile (keep it small)
  for index in `echo 0 1 2 3 4 5 6 7 8 9`
  do
    # period 3600 * nHours
    let wait=3600*$MONITOR_CYCLE_HOURS

    echo " "                                                           >> $logFile
    echo " monitor loop $index started -- $tag (cycle wait $wait sec)" >> $logFile
    echo " "                                                           >> $logFile
    $MONITOR_BASE/monitor.py                                           >> $logFile


    # insure that the log information is updated (WARNING - hardwired, need something more general)
    rsync -Cavz --delete /local/cmsprod/IntelROCCS /home/cmsprod/public_html/ >& /dev/null


    sleep $wait
  done

done

exit 0;
